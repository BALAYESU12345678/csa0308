#include<stdio.h>
#include<stdlib.h>
struct node{int d,h;struct node *l,*r;};
int h(struct node *n){return n?n->h:0;}
int max(int a,int b){return a>b?a:b;}
struct node* new(int v){struct node* n=malloc(sizeof(struct node));n->d=v;n->l=n->r=NULL;n->h=1;return n;}
struct node* R(struct node* y){struct node* x=y->l; y->l=x->r; x->r=y; y->h=max(h(y->l),h(y->r))+1; x->h=max(h(x->l),h(x->r))+1; return x;}
struct node* L(struct node* x){struct node* y=x->r; x->r=y->l; y->l=x; x->h=max(h(x->l),h(x->r))+1; y->h=max(h(y->l),h(y->r))+1; return y;}
int bf(struct node *n){return n? h(n->l)-h(n->r):0;}
struct node* insert(struct node* r,int v){if(!r)return new(v);
 if(v<r->d)r->l=insert(r->l,v);else if(v>r->d)r->r=insert(r->r,v);else return r;
 r->h=1+max(h(r->l),h(r->r));int b=bf(r);
 if(b>1&&v<r->l->d)return R(r);
 if(b<-1&&v>r->r->d)return L(r);
 if(b>1&&v>r->l->d){r->l=L(r->l);return R(r);}
 if(b<-1&&v<r->r->d){r->r=R(r->r);return L(r);}return r;}
int search(struct node* r,int k){return r?(k==r->d?1:k<r->d?search(r->l,k):search(r->r,k)):0;}
int main(){struct node* r=NULL;r=insert(r,10);r=insert(r,20);r=insert(r,5);
 printf("Search 20: %s\n",search(r,20)?"Found":"Not Found");}
